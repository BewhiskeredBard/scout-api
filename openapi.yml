openapi: 3.0.2

info:
  title: Scout API
  description: This is an unofficial API spec for Scout.
  contact:
    url: http://github.com/jordanryanmoore/scout-api
  license:
    name: MIT
    url: http://github.com/jordanryanmoore/scout-api/LICENSE.md
  version: 0.0.0

servers:
  - url: https://api.scoutalarm.com

components:
  parameters:
    DeviceId:
      name: device_id
      in: path
      required: true
      schema:
        type: string

    Email:
      name: email
      in: query
      required: true
      schema:
        type: string

    HubId:
      name: hub_id
      in: path
      required: true
      schema:
        type: string

    InstallCode:
      name: install_code
      in: path
      required: true
      schema:
        type: string

    LocationId:
      name: location_id
      in: path
      required: true
      schema:
        type: string

    MemberId:
      name: member_id
      in: path
      required: true
      schema:
        type: string

    ModeId:
      name: mode_id
      in: path
      required: true
      schema:
        type: string

    PlanCode:
      name: plan_code
      in: path
      required: true
      schema:
        type: string

    RfidId:
      name: rfid_id
      in: path
      required: true
      schema:
        type: string

    SerialNumber:
      name: serial_number
      in: path
      required: true
      schema:
        type: string

    UserCodeId:
      name: user_code_id
      in: path
      required: true
      schema:
        type: string

  schemas:
    AccessSensorState:
      type: string
      enum:
        - open
        - close

    Activity:
      required:
        - description
        - effected
        - event
        - id
        - item_id
        - location_id
        - timestamp
        - type
      properties:
        affector:
          $ref: '#/components/schemas/Affector'
        description:
          type: string
        effected:
          required:
            - value
          properties:
            type:
              $ref: '#/components/schemas/DeviceType'
            value:
              type: string
        event:
          $ref: '#/components/schemas/ActivityEventType'
        id:
          type: string
        item_id:
          type: string
        location_id:
          type: string
        timestamp:
          type: string
          format: date-time
        type:
          $ref: '#/components/schemas/ActivityType'

    ActivityEventType:
      type: string
      enum:
        - armed
        - close
        - co_emergency
        - co_ok
        - co_testing
        - co_warning
        - created
        - disarmed
        - dismissed
        - dry
        - open
        - paired
        - smoke_emergency
        - smoke_ok
        - smoke_testing
        - smoke_warning
        - unpaired
        - wet
        # - malfunction_emergency?
        # - malfunction_ok?
        # - jammed?
        # - ?

    ActivityType:
      type: string
      enum:
        - device
        - location
        - mode

    AddRecipeRequest:
      required:
        - location_id
      properties:
        location_id:
          type: string

    AddUserCodeRequest:
      required:
        - code
        - location_id
        - name
      properties:
        code:
          type: string
          format: password
        location_id:
          type: string
        name:
          type: string

    Affector:
      required:
        - id
        - name
        - type
      properties:
        id:
          type: string
        name:
          type: string
        type:
          $ref: '#/components/schemas/AffectorType'

    AffectorType:
      type: string
      enum:
        - device
        - member

    AmazonAccount:
      properties:
        modes:
          properties:
            away:
              type: string
            home:
              type: string
            sleep:
              type: string
        expires_at:
          type: string
          format: date-time
        pin:
          type: string
          format: password
        scope:
          type: array
          items:
            type: string
        token:
          type: boolean

    BillingInfo:
      required:
        - card
        - expires
        - last_four
        - name
        - postal_code
      properties:
        card:
          type: string
        expires:
          type: string
          # pattern:
        last_four:
          type: string
          minLength: 4
          maxLength: 4
        name:
          type: string
        postal_code:
          type: string
      example:
        card: Visa
        expires: 3/2020
        last_four: "1234"
        name: John Smith
        postal_code: 98765
  
    BillingToken:
      required:
        - token
      properties:
        token:
          type: string
          format: password
          description: A recurly token.
  
    CheckInstallCodeResponse:
      required:
        - valid
      properties:
        valid:
          type: boolean

    CheckSerialNumberResponse:
      required:
        - valid
      properties:
        valid:
          type: boolean

    CoState:
      type: string
      enum:
        - emergency
        - ok
        - testing

    Device:
      required:
        - created
        - desired
        - heartbeat
        - hub_id
        - id
        - location_id
        - mode_ids
        - name
        - type
      properties:
        created:
          type: string
          format: date-time
        desired:
          properties:
            chirp:
              required:
                - enabled
              properties:
                enabled:
                  type: boolean
            chirps:
              required:
                - hub
              properties:
                hub:
                  type: boolean
        heartbeat:
          type: integer
        hub_id:
          type: string
        id:
          type: string
        location_id:
          type: string
        mode_ids:
          type: array
          items:
            type: string
        name:
          type: string
        pro_monitoring_label:
          type: string
        reported:
          required:
            - fw_version
            - timedout
          properties:
            battery:
              required:
                - at
              properties:
                at:
                  type: string
                  format: date-time
                low:
                  type: string
                  format: date-time
            fw_version:
              type: string
            humidity:
              required:
                - at
                - percent
              properties:
                at:
                  type: string
                  format: date-time
                percent:
                  type: number
            manufacturer:
              type: string
            model:
              type: string
            temperature:
              required:
                - at
                - degrees
              properties:
                at:
                  type: string
                  format: date-time
                degrees:
                  type: number
            timedout:
              type: boolean
            trigger:
              required:
                - at
              properties:
                at:
                  type: string
                  format: date-time
                state:
                  oneOf:
                    - $ref: '#/components/schemas/AccessSensorState'
                    - $ref: '#/components/schemas/DoorPanelState'
                    - $ref: '#/components/schemas/GlassBreakState'
                    - $ref: '#/components/schemas/MotionSensorState'
                    - $ref: '#/components/schemas/SmokeAlarmState'
                    - $ref: '#/components/schemas/WaterSensorState'
                tamper:
                  type: boolean
            # TODO: zigbee: {}
        type:
          $ref: '#/components/schemas/DeviceType'
        updated:
          type: string
          format: date-time

    DeviceAlarmEvent:
      required:
        - device_id
        - event
      properties:
        affector:
          $ref: '#/components/schemas/Affector'
        device_id:
          type: string
        event:
          $ref: '#/components/schemas/DeviceAlarmEventType'

    DeviceAlarmEventType:
      type: string
      enum:
        - alarmed
        - dismissed

    DeviceEventType:
      type: string
      enum:
        - alarmed
        - dismissed
        - paired
        - triggered
        - unpaired

    DeviceGroup:
      required:
        - name
        - device_ids
      properties:
        name:
          type: string
        device_ids:
          type: array
          items:
            type: string

    DeviceTestState:
      required:
        - test
      properties:
        test:
          type: boolean

    DeviceType:
      type: string
      enum:
        - access_sensor
        - door_panel
        - glass_break
        - motion_sensor
        - smoke_alarm
        - water_sensor

    DoorPanelState:
      type: string
      enum:
        - open
        - close

    EnvironmentalAlarm:
      required:
        - alarmed
      properties:
        alarmed:
          type: array
          items:
            type: string

    ErrorResponse:
      required:
        - status
        - error
      properties:
        status:
          type: integer
          minimum: 400
          maximum: 600
          exclusiveMaximum: true
        error:
          type: string

    EventType:
      type: string
      enum:
        - device
        - hub
        - mode
        - rfid

    FindMemberResponse:
      properties:
        member_id:
          type: string

    ForgotPasswordRequest:
      required:
        - email
      properties:
        email:
          type: string
          format: email

    ForgotPasswordResponse:
      required:
        - sent
      properties:
        sent:
          type: boolean

    # TODO: figure this out
    GlassBreakState:
      type: object

    Hub:
      required:
        - created
        - desired
        - heartbeat
        - id
        - install_code
        - location_id
        - serial_number
        - type
        - version
      properties:
        created:
          type: string
          format: date-time
        desired:
          required:
            - chirps
          properties:
            chirp:
              $ref: '#/components/schemas/HubChirp'
            chirps:
              required:
                - arming
              properties:
                arming:
                  type: boolean
        heartbeat:
          type: integer
        id:
          type: string
        install_code:
          type: string
        location_id:
          type: string
        reported:
          required:
            - battery
            # - cellular?
            # - connection?
            - fw_version
            # - led?
            # - logging?
            # - mac_address?
            # - siren?
            - status
            # - wifi?
            # - zigbee?
            # - zwave?
          properties:
            battery:
              required:
                - active
                - at
                - level
                # - temperature?
              properties:
                active:
                  type: boolean
                at:
                  type: string
                  format: date-time
                level:
                  type: number
                low:
                  type: string
                  format: date-time
                temperature:
                  type: integer
            # TODO: cellular: {}
            # TODO: connection: {}
            fw_version:
              type: string
            hw_version:
              type: string
            led:
              type: string
              # TODO enum: green, …?
            logging:
              type: boolean
            mac_address:
              type: string
            siren:
              type: boolean
            status:
              type: string
              # TODO: enum: active, …?
            temperature:
              type: integer
            wifi:
              required:
                - active
                - at
              properties:
                active:
                  type: boolean
                at:
                  type: string
                  format: date-time
            # TODO: zigbee: {}
            # TODO: zwave: {}
        serial_number:
          type: string
        type:
          $ref: '#/components/schemas/HubType'
        updated:
          type: string
          format: date-time
        version:
          type: string

    HubChirp:
      type: string
      enum:
        - single
        - "off"

    HubType:
      type: string
      enum:
        - scout1
        - scout1S

    Location:
      required:
        - address
        - admin_ids
        - created
        - environmental
        - id
        - member_ids
        - member_state
        - mode_ids
        - name
        - plan
        - pro_monitoring
        - rfid_ids
        - state
        - structure_type
        - subscription_required
        - timezone
      properties:
        address:
          required:
            - addr1
            - city
            - country
            - state
            - zipcode
          properties:
            addr1:
              type: string
            addr2:
              type: string
            city:
              type: string
            country:
              type: string
            state:
              type: string
            zipcode:
              type: string
        admin_ids:
          type: array
          items:
            type: string
        alarm_contacts:
          required:
            - email
            - phone_numbers
            - sms_numbers
          properties:
            phone_numbers:
              type: array
              items:
                type: string
            sms_numbers:
              type: array
              items:
                type: string
            email:
              type: array
              items:
                type: string
        # aliases: {}
        amazon_user_id:
          type: string
        camera_subscription_id:
          type: string
        connected_accounts:
          properties:
            amazon:
              $ref: '#/components/schemas/AmazonAccount'
            ifttt:
              type: array
              items:
                type: string
        created:
          type: string
          format: date-time
        device_groups:
          type: array
          items:
            $ref: '#/components/schemas/DeviceGroup'
        device_ids:
          type: array
          items:
            type: string
        environmental:
          $ref: '#/components/schemas/EnvironmentalAlarm'
        hub_id:
          type: string
        id:
          type: string
        member_ids:
          type: array
          items:
            type: string
        member_state:
          $ref: '#/components/schemas/LocationMemberState'
        mode_ids:
          type: array
          items:
            type: string
        monitoring_account_number:
          type: string
        name:
          type: string
        plan:
          $ref: '#/components/schemas/LocationPlan'
        pro_monitoring:
          required:
            - address1
            - city
            - region
            - structure_type
            - time_zone
            - zipcode
          properties:
            account_number:
              type: string
            address1:
              type: string
            address2:
              type: string
            alternative_phone:
              type: string
            city:
              type: string
            county:
              type: string
            created:
              type: string
              format: date-time
            cross_street:
              type: string
            name:
              type: string
            passcodes:
              type: array
              items:
                type: string
                format: password
            phone:
              type: string
            region:
              type: string
            structure_type:
              type: string
            time_zone:
              type: string
            zipcode:
              type: string
        rfid_ids:
          type: array
          items:
            type: string
        state:
          $ref: '#/components/schemas/LocationState'
        structure_type:
          $ref: '#/components/schemas/LocationStructureType'
        subscription_id:
          type: string
        subscription_required:
          type: boolean
        timezone:
          type: string
        updated:
          type: string
          format: date-time

    LocationMember:
      required:
        - email
        - fname
        - id
        - state
      properties:
        email:
          type: string
        fname:
          type: string
        id:
          type: string
          readOnly: true
        lname:
          type: string
        state:
          $ref: '#/components/schemas/LocationMemberState'

    LocationMemberState:
      type: string
      enum:
        - admin
        - member
      readOnly: true

    LocationState:
      required:
        - install
        - visible
      properties:
        armed:
          type: string
        install:
          type: boolean
        ready:
          type: boolean
        visible:
          type: boolean

    LocationStructureType:
      type: string
      enum:
        - A # Apartment or condo
        - S # Single-family home
        # - ?
        # - ?

    LocationPlan:
      type: string
      enum:
        - free
        - pro
        # - ?

    LoginRequest:
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password

    Member:
      required:
        - address
        - beta_tester
        - created
        - email
        - fname
        - id
        - location_ids
        - notifications
      properties:
        address:
          properties:
            addr1:
              type: string
            city:
              type: string
            country:
              type: string
            state:
              type: string
            timezone:
              type: string
            zipcode:
              type: string
        beta_tester:
          type: boolean
        connected_accounts:
          # required:
            # - amazon
            # - discourse
            # - ifttt
          properties:
            amazon:
              type: boolean
            discourse:
              type: boolean
            ifttt:
              type: boolean
        created:
          type: string
          format: date-time
        email:
          type: string
          format: email
        fname:
          type: string
        helpscout_id:
          type: integer
        id:
          type: string
        lname:
          type: string
        location_ids:
          type: array
          items:
            type: string
        phone_number:
          type: string
        notifications:
          required:
            - alarm_state_change
            - lost_sensor
            - power_outage
          properties:
            alarm_state_change:
              type: boolean
            lost_sensor:
              type: boolean
            power_outage:
              type: boolean
        updated:
          type: string
          format: date-time

    Mode:
      required:
        - created
        - id
        - location_id
        - name
        - state
      properties:
        actions:
          properties:
            camera_record:
              type: boolean
            count_down:
              type: boolean
            email:
              type: array
              items:
                type: string
                format: email
            entry_delay:
              type: integer
            lights:
              type: boolean
            professional_monitoring:
              type: boolean
            push:
              type: boolean
            siren:
              type: boolean
        created:
          type: string
          format: date-time
        device_ids:
          type: array
          items:
            type: string
        id:
          type: string
        location_id:
          type: string
        name:
          type: string
        state:
          $ref: '#/components/schemas/ModeState'
        updated:
          type: string
          format: date-time

    ModeEvent:
      required:
        - mode_id
        - event
      properties:
         mode_id:
           type: string
         event:
           $ref: '#/components/schemas/ModeState'

    ModeState:
      type: string
      enum:
        - alarmed
        - armed
        - arming
        - disarmed
        - triggered

    ModeStateUpdate:
      type: string
      enum:
        - arming
        - disarm

    MotionSensorState:
      type: string
      enum:
        - motion_start
        - motion_stop

    PairDeviceRequest:
      required:
        - device_type
        - location_id
      properties:
        device_type:
          $ref: '#/components/schemas/DeviceType'
        location_id:
          type: string

    PairDeviceResponse:
      required:
        - device_type
      properties:
        device_type:
          $ref: '#/components/schemas/DeviceType'

    Plan:
      required:
        - amount
        - addons
        - code
        - interval
        - name
      properties:
        amount:
          type: number
        addons:
          type: array
          items:
            $ref: '#/components/schemas/PlanAddon'
        code:
          type: string
        interval:
          $ref: '#/components/schemas/PlanInterval'
        name:
          type: string

    PlanAddon:
      required:
        - amount
        - code
        - name
      properties:
        amount:
          type: number
        code:
          type: string
        name:
          type: string

    PlanInterval:
      type: string
      enum:
        - yr
        - mo

    ResetPasswordRequest:
      required:
        - token
        - new_password
        - new_password_confirmation
      properties:
        token:
          type: string
        new_password:
          type: string
          format: password
        new_password_confirmation:
          type: string
          format: password

    Rfid:
      required:
        - active
        - created
        - hub_id
        - id
        - location_id
        - mode_id
        - name
        - token
      properties:
        active:
          type: boolean
        created:
          type: string
          format: date-time
          readOnly: true
        hub_id:
          type: string
          readOnly: true
        id:
          type: string
          readOnly: true
        location_id:
          type: string
          readOnly: true
        mode_id:
          type: string
        name:
          type: string
        schedule:
          $ref: '#/components/schemas/Schedule'
        # swiped: null
        token:
          type: string
          readOnly: true
        updated:
          type: string
          format: date-time
          readOnly: true

    RfidEvent:
      required:
        - event
        - token
      properties:
        event:
          $ref: '#/components/schemas/RfidEventType'
        token:
          type: string

    RfidEventType:
      type: string
      enum:
        - swiped

    Session:
      required:
        - jwt
      properties:
        jwt:
          type: string

    Schedule:
      required:
        - days
        - end_time
        - start_time
      properties:
        days:
          type: array
          items:
            type: integer
            minimum: 0
            maximum: 6
        end_time:
          type: string
          # pattern: 17:00
        start_time:
          type: string
          # pattern: 9:00

    SetAdminRequest:
      required:
        - admin
      properties:
        admin:
          type: boolean

    SetChirpRequest:
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/HubChirp'

    SetSirenRequest:
      required:
        - "on"
      properties:
        on:
          type: boolean

    SignupRequest:
      required:
        - email
        - fname
        - lname
        - phone_number
        - password
        - password_confirmation
      properties:
        email:
          type: string
          format: email
        fname:
          type: string
        lname:
          type: string
        phone_number:
          type: string
        password:
          type: string
          format: password
        password_confirmation:
          type: string
          format: password

    SmokeAlarmState:
      required:
        - smoke
      properties:
        co:
          $ref: '#/components/schemas/CoState'
        smoke:
          $ref: '#/components/schemas/SmokeState'

    SmokeState:
      type: string
      enum:
        - emergency
        - ok
        - testing

    Subscription:
      required:
        - addons
        - amount
        - plan
        - state
      properties:
        addons:
          type: array
          items:
            $ref: '#/components/schemas/PlanAddon'
        amount:
          type: number
        cloud_video_recording:
          type: array
          items: # TODO
            type: object
        next_cycle:
          type: string
          format: date-time
        plan:
          type: string
        state:
          $ref: '#/components/schemas/SubscriptionState'

    SubscriptionState:
      type: string
      enum:
        - active
        # - ?

    ToggleRecipeRequest:
      required:
        - state
      properties:
        state:
          $ref: '#/components/schemas/ModeStateUpdate'

    UpdatePasswordRequest:
      required:
        - password
        - new_password
        - new_password_confirmation
      properties:
        password:
          type: string
          format: password
        new_password:
          type: string
          format: password
        new_password_confirmation:
          type: string
          format: password

    UpdateEmailRequest:
      required:
        - password
        - new_email
      properties:
        password:
          type: string
          format: password
        new_email:
          type: string
          format: email

    UpdateRecipeRequest:
      required:
        - name
      properties:
        name:
          type: string

    UserCode:
      required:
        - active
        - created
        - disarm_on_entry
        - hub_id
        - id
        - location_id
        - name
        - token
      properties:
        active:
          type: boolean
        created:
          type: string
          format: date-time
          readOnly: true
        disarm_on_entry:
          type: boolean
        hub_id:
          type: string
          readOnly: true
        id:
          type: string
          readOnly: true
        location_id:
          type: string
          readOnly: true
        name:
          type: string
        schedule:
          $ref: '#/components/schemas/Schedule'
        token:
          type: string
          format: password
        type:
          $ref: '#/components/schemas/UserCodeType'
        updated:
          type: string
          format: date-time
          readOnly: true
        user_id:
          type: number
          readOnly: true

    UserCodeType:
      type: string
      enum:
        - scheduled_code
      readOnly: true

    WaterSensorState:
      type: string
      enum:
        - dry
        - wet

  responses:
    EmptyResponse:
      description: An empty response.
      content:
        application/json:
          schema:
            type: object

    ErrorResponse:
      description: An error response.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

  securitySchemes:
    jwt:
      type: apiKey
      name: Authorization
      in: header

paths:
  /auth:
    post:
      tags:
        - authentication
        - unauthenticated
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        200:
          description: A new session for the member.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'

    put:
      tags:
        - authentication
        - unauthenticated
      operationId: forgotPassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgotPasswordRequest'
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        200:
          description: If the email was sent.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForgotPasswordResponse'

  /auth/email:
    put:
      tags:
        - authentication
        - authenticated
      operationId: updateEmail
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEmailRequest'
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        200:
          description: A new session for the member.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
      security:
        - jwt: []

  /auth/password:
    post:
      tags:
        - authentication
        - unauthenticated
      operationId: resetPassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        200:
          description: A new session for the member.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'

    put:
      tags:
        - authentication
        - authenticated
      operationId: updatePassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePasswordRequest'
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        200:
          description: A new session for the member.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
      security:
        - jwt: []

  /auth/signup:
    post:
      tags:
        - authentication
        - unauthenticated
      operationId: signup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequest'
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        200:
          description: A new session for the member.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'

  /devices:
    put:
      tags:
        - authenticated
        - devices
      operationId: pairDevice
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PairDeviceRequest'
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        200:
          description: The device pairing response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PairDeviceResponse'
      security:
        - jwt: []

  /devices/{device_id}:
    parameters:
      - $ref: '#/components/parameters/DeviceId'
    get:
      tags:
        - authenticated
        - devices
      operationId: getDevice
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        200:
          description: The device.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
      security:
        - jwt: []

  /devices/{device_id}/activity:
    parameters:
      - $ref: '#/components/parameters/DeviceId'
    get:
      tags:
        - authenticated
        - devices
      operationId: getDeviceActivity
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        200:
          description: A list of the device's activities.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Activity'
      security:
        - jwt: []

  /devices/{device_id}/test:
    parameters:
      - $ref: '#/components/parameters/DeviceId'
    delete:
      tags:
        - authenticated
        - devices
      operationId: unsetTestMode
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        200:
          description: The device's test state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceTestState'
      security:
        - jwt: []
    put:
      tags:
        - authenticated
        - devices
      operationId: setTestMode
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        200:
          description: The device's test state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceTestState'
      security:
        - jwt: []

  /hubs/{hub_id}/chirp:
    parameters:
      - $ref: '#/components/parameters/HubId'
    put:
      tags:
        - authenticated
        - hubs
      operationId: setChirp
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetChirpRequest'
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        200:
          description: The hub.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hub'
      security:
        - jwt: []

  /hubs/{hub_id}/siren:
    parameters:
      - $ref: '#/components/parameters/HubId'
    put:
      tags:
        - authenticated
        - hubs
      operationId: setSiren
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetSirenRequest'
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        200:
          description: The hub.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hub'
      security:
        - jwt: []

  /hubs/install_code/{install_code}:
    parameters:
      - $ref: '#/components/parameters/InstallCode'
    get:
      tags:
        - unauthenticated
        - hubs
      operationId: checkInstallCode
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        200:
          description: If the install code is valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckInstallCodeResponse'

  /hubs/serial_number/{serial_number}:
    parameters:
      - $ref: '#/components/parameters/SerialNumber'
    get:
      tags:
        - unauthenticated
        - hubs
      operationId: checkSerialNumber
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        200:
          description: If the serial number is valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckSerialNumberResponse'

  /locations/{location_id}:
    parameters:
      - $ref: '#/components/parameters/LocationId'
    get:
      tags:
        - authenticated
        - locations
      operationId: getLocation
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        200:
          description: The location.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
      security:
        - jwt: []

  /locations/{location_id}/activity:
    parameters:
      - $ref: '#/components/parameters/LocationId'
    get:
      tags:
        - authenticated
        - locations
      operationId: getActivity
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        200:
          description: A list of the location's activities.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Activity'
      security:
        - jwt: []

  /locations/{location_id}/billing:
    parameters:
      - $ref: '#/components/parameters/LocationId'
    get:
      tags:
        - authenticated
        - locations
      operationId: getBillingInfo
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        200:
          description: The location's billing information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillingInfo'
      security:
        - jwt: []
    put:
      tags:
        - authenticated
        - locations
      operationId: updateBillingInfo
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BillingToken'
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        200:
          description: The location's billing information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillingInfo'
      security:
        - jwt: []

  /locations/{location_id}/devices:
    parameters:
      - $ref: '#/components/parameters/LocationId'
    get:
      tags:
        - authenticated
        - devices
        - locations
      operationId: getDevices
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        200:
          description: A list of the location's devices.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Device'
      security:
        - jwt: []

  /locations/{location_id}/environmental:
    parameters:
      - $ref: '#/components/parameters/LocationId'
    delete:
      tags:
        - authenticated
        - locations
      operationId: dismissEnvironmental
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        200:
          description: The location's environmental alarm.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvironmentalAlarm'
      security:
        - jwt: []
    get:
      tags:
        - authenticated
        - locations
      operationId: getEnvironmental
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        200:
          description: The location's environmental alarm.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvironmentalAlarm'
      security:
        - jwt: []
    post:
      tags:
        - authenticated
        - locations
      operationId: triggerEnvironmental
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        200:
          description: The location's environmental alarm.
          content:
            application/json:
              schema: # TODO
                type: object
      security:
        - jwt: []

  /locations/{location_id}/hub:
    parameters:
      - $ref: '#/components/parameters/LocationId'
    get:
      tags:
        - authenticated
        - hubs
        - locations
      operationId: getHub
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        200:
          description: The location's hub.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hub'
      security:
        - jwt: []

  /locations/{location_id}/install:
    parameters:
      - $ref: '#/components/parameters/LocationId'
    delete:
      tags:
        - authenticated
        - locations
      operationId: unsetInstallMode
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        200:
          description: The location's install state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationState'
      security:
        - jwt: []
    put:
      tags:
        - authenticated
        - locations
      operationId: setInstallMode
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        200:
          description: The location's install state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationState'
      security:
        - jwt: []

  /locations/{location_id}/members:
    parameters:
      - $ref: '#/components/parameters/LocationId'
    get:
      tags:
        - authenticated
        - locations
        - members
      operationId: getMembers
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        200:
          description: A list of the location's members.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LocationMember'
      security:
        - jwt: []
    post:
      tags:
        - authenticated
        - locations
        - members
      operationId: addMember
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocationMember'
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        200:
          description: A list of the location's members.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LocationMember'
      security:
        - jwt: []

  /locations/{location_id}/members/{member_id}:
    parameters:
      - $ref: '#/components/parameters/LocationId'
      - $ref: '#/components/parameters/MemberId'
    delete:
      tags:
        - authenticated
        - locations
        - members
      operationId: removeMember
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        200:
          description: A list of the location's remaining members.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LocationMember'
      security:
        - jwt: []
    put:
      tags:
        - authenticated
        - locations
        - members
      operationId: setAdmin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetAdminRequest'
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        200:
          description: A list of the location's members.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LocationMember'
      security:
        - jwt: []

  /locations/{location_id}/modes:
    parameters:
      - $ref: '#/components/parameters/LocationId'
    get:
      tags:
        - authenticated
        - locations
        - modes
      operationId: getModes
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        200:
          description: A list of the location's modes.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Mode'
      security:
        - jwt: []

  /locations/{location_id}/plans:
    parameters:
      - $ref: '#/components/parameters/LocationId'
    get:
      tags:
        - authenticated
        - locations
      operationId: getPlans
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        200:
          description: The location's plans.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Plan'
      security:
        - jwt: []

  /locations/{location_id}/rfids:
    parameters:
      - $ref: '#/components/parameters/LocationId'
    get:
      tags:
        - authenticated
        - locations
        - rfids
      operationId: getRfids
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        200:
          description: A list of the location's RFIDs.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Rfid'
      security:
        - jwt: []

  /locations/{location_id}/subscription:
    parameters:
      - $ref: '#/components/parameters/LocationId'
    get:
      tags:
        - authenticated
        - locations
      operationId: getSubscription
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        200:
          description: The location's subscription.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
      security:
        - jwt: []

  /locations/{location_id}/subscription/{plan_code}:
    parameters:
      - $ref: '#/components/parameters/LocationId'
      - $ref: '#/components/parameters/PlanCode'
    get:
      tags:
        - authenticated
        - locations
      operationId: getPlanSubscription
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        200:
          description: The location's subscription if it was switched to the given plan.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
      security:
        - jwt: []

  /locations/{location_id}/user_codes:
    parameters:
      - $ref: '#/components/parameters/LocationId'
    get:
      tags:
        - authenticated
        - locations
        - userCodes
      operationId: getUserCodes
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        200:
          description: The location's user codes.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserCode'
      security:
        - jwt: []

  /members:
    get:
      tags:
        - authenticated
        - members
      operationId: findMember
      parameters:
        - $ref: '#/components/parameters/Email'
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        200:
          description: A matching member, if any.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FindMemberResponse'
      security:
        - jwt: []

  /members/{member_id}:
    parameters:
      - $ref: '#/components/parameters/MemberId'
    get:
      tags:
        - authenticated
        - members
      operationId: getProfile
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        200:
          description: The member's profile.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
      security:
        - jwt: []

  /members/{member_id}/locations:
    parameters:
      - $ref: '#/components/parameters/MemberId'
    get:
      tags:
        - authenticated
        - members
        - locations
      operationId: getLocations
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        200:
          description: A list of the member's locations.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Location'
      security:
        - jwt: []

  /modes:
    post:
      tags:
        - authenticated
        - modes
      operationId: addRecipe
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddRecipeRequest'
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        200:
          description: The new recipe.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Mode'
      security:
        - jwt: []

  /modes/{mode_id}:
    parameters:
      - $ref: '#/components/parameters/ModeId'
    delete:
      tags:
        - authenticated
        - modes
      operationId: removeRecipe
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        200:
          $ref: '#/components/responses/EmptyResponse'
      security:
        - jwt: []
    post:
      tags:
        - authenticated
        - modes
      operationId: toggleRecipe
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ToggleRecipeRequest'
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        200:
          description: The updated recipe.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Mode'
      security:
        - jwt: []
    put:
      tags:
        - authenticated
        - modes
      operationId: updateRecipe
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRecipeRequest'
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        200:
          description: The updated recipe.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Mode'
      security:
        - jwt: []

  /modes/{mode_id}/devices/{device_id}:
    parameters:
      - $ref: '#/components/parameters/ModeId'
      - $ref: '#/components/parameters/DeviceId'
    delete:
      tags:
        - authenticated
        - devices
        - modes
      operationId: removeRecipeDevice
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        200:
          description: The updated recipe.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Mode'
      security:
        - jwt: []
    put:
      tags:
        - authenticated
        - devices
        - modes
      operationId: addRecipeDevice
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        200:
          description: The updated recipe.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Mode'
      security:
        - jwt: []

  /rfids/{rfid_id}:
    parameters:
      - $ref: '#/components/parameters/RfidId'
    delete:
      tags:
        - authenticated
        - rfids
      operationId: removeRfid
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        200:
          $ref: '#/components/responses/EmptyResponse'
      security:
        - jwt: []
    put:
      tags:
        - authenticated
        - rfids
      operationId: updateRfid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rfid'
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        200:
          description: The updated RFID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rfid'
      security:
        - jwt: []

  /user_codes:
    post:
      tags:
        - authenticated
        - userCodes
      operationId: addUserCode
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddUserCodeRequest'
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        200:
          description: The new user code.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCode'
      security:
        - jwt: []

  /user_codes/{user_code_id}:
    parameters:
      - $ref: '#/components/parameters/UserCodeId'
    delete:
      tags:
        - authenticated
        - userCodes
      operationId: removeUserCode
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        200:
          $ref: '#/components/responses/EmptyResponse'
      security:
        - jwt: []
    get:
      tags:
        - authenticated
        - userCodes
      operationId: getUserCode
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        200:
          description: The user code.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCode'
      security:
        - jwt: []
    put:
      tags:
        - authenticated
        - userCodes
      operationId: updateUserCode
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCode'
      responses:
        default:
          $ref: '#/components/responses/ErrorResponse'
        200:
          description: The updated user code.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCode'
      security:
        - jwt: []

tags:
  - description: Operations that require prior authentication.
    name: authenticated
  - description: Operations that deal with authentication.
    name: authentication
  - description: Operations that deal with devices.
    name: devices
  - description: Operations that deal with hubs.
    name: hubs
  - description: Operations that deal with locations.
    name: locations
  - description: Operations that deal with members.
    name: members
  - description: Operations that deal with modes.
    name: modes
  - description: Operations that deal with RFIDs.
    name: rfids
  - description: Operations that do not require prior authentication.
    name: unauthenticated
  - description: Operations that deal with user codes.
    name: userCodes
