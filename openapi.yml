openapi: 3.0.2

info:
  title: Scout API
  description: This is an unofficial API spec for Scout.
  contact:
    url: http://github.com/jordanryanmoore/scout-api
  license:
    name: MIT
    url: http://github.com/jordanryanmoore/scout-api/LICENSE.md
  version: 0.0.0

servers:
  - url: https://api.scoutalarm.com

components:
  parameters:
    HubId:
      name: hub_id
      in: path
      required: true
      schema:
        type: string

    InstallCode:
      name: install_code
      in: path
      required: true
      schema:
        type: string

    LocationId:
      name: location_id
      in: path
      required: true
      schema:
        type: string

    MemberId:
      name: member_id
      in: path
      required: true
      schema:
        type: string

    ModeId:
      name: mode_id
      in: path
      required: true
      schema:
        type: string

    SerialNumber:
      name: serial_number
      in: path
      required: true
      schema:
        type: string

  schemas:
    AmazonAccount:
      properties:
        modes:
          properties:
            away:
              type: string
            home:
              type: string
            sleep:
              type: string
        expires_at:
          type: string
          format: date-time
        pin:
          type: string
          format: password
        scope:
          type: array
          items:
            type: string
        token:
          type: boolean
  
    CheckInstallCodeResponse:
      required:
        - valid
      properties:
        valid:
          type: boolean

    CheckSerialNumberResponse:
      required:
        - valid
      properties:
        valid:
          type: boolean

    ContactState:
      type: string
      enum:
        - open
        - close

    Device:
      required:
        - created
        - desired
        - heartbeat
        - hub_id
        - id
        - location_id
        - mode_ids
        - name
        - type
      properties:
        created:
          type: string
          format: date-time
        desired:
          properties:
            chirp:
              required:
                - enabled
              properties:
                enabled:
                  type: boolean
            chirps:
              required:
                - hub
              properties:
                hub:
                  type: boolean
        heartbeat:
          type: integer
        hub_id:
          type: string
        id:
          type: string
        location_id:
          type: string
        mode_ids:
          type: array
          items:
            type: string
        name:
          type: string
        pro_monitoring_label:
          type: string
        reported:
          type: object
          required:
            - fw_version
            - timedout
          properties:
            battery:
              type: object
              required:
                - at
              properties:
                at:
                  type: string
                  format: date-time
                low:
                  type: string
                  format: date-time
            fw_version:
              type: string
            humidity:
              type: object
              required:
                - at
                - percent
              properties:
                at:
                  type: string
                  format: date-time
                percent:
                  type: number
            manufacturer:
              type: string
            model:
              type: string
            temperature:
              type: object
              required:
                - at
                - degrees
              properties:
                at:
                  type: string
                  format: date-time
                degrees:
                  type: number
            timedout:
              type: boolean
            trigger:
              type: object
              required:
                - at
              properties:
                at:
                  type: string
                  format: date-time
                state:
                  oneOf: # This might necessitate some refactoringâ€¦
                    - $ref: '#/components/schemas/ContactState'
                    - $ref: '#/components/schemas/MotionState'
                    - $ref: '#/components/schemas/SmokeState'
                    - $ref: '#/components/schemas/WaterState'
                tamper:
                  type: boolean
            # zigbee: {}
        type:
          $ref: '#/components/schemas/DeviceType'
        updated:
          type: string
          format: date-time

    DeviceGroup:
      required:
        - name
        - device_ids
      properties:
        name:
          type: string
        device_ids:
          type: array
          items:
            type: string

    DeviceType:
      type: string
      enum:
        - access_sensor
        - door_panel
        - glass_break
        - motion_sensor
        - smoke_alarm
        - water_sensor

    ForgotPasswordRequest:
      required:
        - email
      properties:
        email:
          type: string
          format: email

    ForgotPasswordResponse:
      required:
        - sent
      properties:
        sent:
          type: boolean

    Hub:
      required:
        - created
        - desired
        - heartbeat
        - id
        - install_code
        - location_id
        - serial_number
        - type
        - version
      properties:
        created:
          type: string
          format: date-time
        desired:
          required:
            - chirps
          properties:
            chirp:
              type: string
              enum:
                - single
                # - ?
            chirps:
              required:
                - arming
              properties:
                arming:
                  type: boolean
        heartbeat:
          type: integer
        id:
          type: string
        install_code:
          type: string
        location_id:
          type: string
        reported:
          required:
            - battery
            # - cellular
            # - connection
            - fw_version
            # - led
            # - logging
            # - mac_address
            # - siren
            - status
            # - wifi
            # - zigbee
            # - zwave
          properties:
            battery:
              type: object
              required:
                - active
                - at
                - level
                # - temperature
              properties:
                active:
                  type: boolean
                at:
                  type: string
                  format: date-time
                level:
                  type: number
                low:
                  type: string
                  format: date-time
                temperature:
                  type: integer
            # cellular: {}
            # connection: {}
            fw_version:
              type: string
            hw_version:
              type: string
            led:
              type: string
              enum:
                - green
                # - ?
            logging:
              type: boolean
            mac_address:
              type: string
            siren:
              type: boolean
            status:
              type: string
              enum:
                - active
                # - ?
            temperature:
              type: integer
            wifi:
              required:
                - active
                - at
              properties:
                active:
                  type: boolean
                at:
                  type: string
                  format: date-time
            # zigbee: {}
            # zwave: {}
        serial_number:
          type: string
        type:
          type: string
          enum:
            - scout1
            - scout1S
        updated:
          type: string
          format: date-time
        version:
          type: string

    Location:
      required:
        - address
        - admin_ids
        - created
        - environmental
        - id
        - member_ids
        - mode_ids
        - name
        - plan
        - pro_monitoring
        - rfid_ids
        - state
        - structure_type
        - subscription_required
        - timezone
      properties:
        address:
          required:
            - addr1
            - city
            - country
            - state
            - zipcode
          properties:
            addr1:
              type: string
            addr2:
              type: string
            city:
              type: string
            country:
              type: string
            state:
              type: string
            zipcode:
              type: string
        admin_ids:
          type: array
          items:
            type: string
        alarm_contacts:
          required:
            - email
            - phone_numbers
            - sms_numbers
          properties:
            phone_numbers:
              type: array
              items:
                type: string
            sms_numbers:
              type: array
              items:
                type: string
            email:
              type: array
              items:
                type: string
        # aliases: {}
        amazon_user_id:
          type: string
        camera_subscription_id:
          type: string
        connected_accounts:
          properties:
            amazon:
              $ref: '#/components/schemas/AmazonAccount'
            ifttt:
              type: array
              items:
                type: string
        created:
          type: string
          format: date-time
        device_groups:
          type: array
          items:
            $ref: '#/components/schemas/DeviceGroup'
        device_ids:
          type: array
          items:
            type: string
        environmental:
          required:
            - alarmed
          properties:
            alarmed:
              type: array
              items:
                type: string
        hub_id:
          type: string
        id:
          type: string
        member_ids:
          type: array
          items:
            type: string
        member_state:
          $ref: '#/components/schemas/MemberState'
        mode_ids:
          type: array
          items:
            type: string
        monitoring_account_number:
          type: string
        name:
          type: string
        plan:
          $ref: '#/components/schemas/LocationPlan'
        pro_monitoring:
          required:
            - address1
            - city
            - region
            - structure_type
            - time_zone
            - zipcode
          properties:
            account_number:
              type: string
            address1:
              type: string
            address2:
              type: string
            alternative_phone:
              type: string
            city:
              type: string
            county:
              type: string
            created:
              type: string
              format: date-time
            cross_street:
              type: string
            name:
              type: string
            passcodes:
              type: array
              items:
                type: string
                format: password
            phone:
              type: string
            region:
              type: string
            structure_type:
              type: string
            time_zone:
              type: string
            zipcode:
              type: string
        rfid_ids:
          type: array
          items:
            type: string
        state:
          type: object
          required:
            - install
            - visible
          properties:
            armed:
              type: string
            install:
              type: boolean
            ready:
              type: boolean
            visible:
              type: boolean
        structure_type:
          $ref: '#/components/schemas/LocationStructureType'
        subscription_id:
          type: string
        subscription_required:
          type: boolean
        timezone:
          type: string
        updated:
          type: string
          format: date-time

    LocationStructureType:
      type: string
      enum:
        - A # Apartment or condo
        - S # Single-family home
        # - ?
        # - ?

    LocationPlan:
      type: string
      enum:
        - free
        - pro
        # - ?

    LoginRequest:
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password

    MemberState:
      type: string
      enum:
        - admin
        - member

    Mode:
      required:
        - actions
        - created
        - device_ids
        - id
        - location_id
        - name
        - state
      properties:
        actions:
          required:
            - camera_record
            - count_down
            - email
            - entry_delay
            - lights
            - professional_monitoring
            - push
            - siren
          properties:
            camera_record:
              type: boolean
            count_down:
              type: boolean
            email:
              type: array
              items:
                type: string
            entry_delay:
              type: integer
            lights:
              type: boolean
            professional_monitoring:
              type: boolean
            push:
              type: boolean
            siren:
              type: boolean
        created:
          type: string
          format: date-time
        device_ids:
          type: array
          items:
            type: string
        id:
          type: string
        location_id:
          type: string
        name:
          type: string
        state:
          $ref: '#/components/schemas/ModeState'
        updated:
          type: string
          format: date-time

    ModeState:
      type: string
      enum:
        - disarmed
        - arming
        - armed
        - triggered
        - alarmed

    MotionState:
      type: string
      enum:
        - motion_start
        - motion_stop

    ResetPasswordRequest:
      required:
        - token
        - new_password
        - new_password_confirmation
      properties:
        token:
          type: string
        new_password:
          type: string
          format: password
        new_password_confirmation:
          type: string
          format: password

    Session:
      required:
        - jwt
      properties:
        jwt:
          type: string

    SetChirpRequest:
      required:
        - type
      properties:
        type:
          type: string
          enum:
            - single
            # - ?

    SignupRequest:
      required:
        - email
        - fname
        - lname
        - phone_number
        - password
        - password_confirmation
      properties:
        email:
          type: string
          format: email
        fname:
          type: string
        lname:
          type: string
        phone_number:
          type: string
        password:
          type: string
          format: password
        password_confirmation:
          type: string
          format: password

    SmokeState:
      required:
        - smoke
      properties:
        smoke:
          type: string
          enum:
            - ok
            # - ?

    ToggleRecipeRequest:
      required:
        - state
      properties:
        state:
          $ref: '#/components/schemas/ModeState'

    UpdatePasswordRequest:
      required:
        - password
        - new_password
        - new_password_confirmation
      properties:
        password:
          type: string
          format: password
        new_password:
          type: string
          format: password
        new_password_confirmation:
          type: string
          format: password

    UpdateEmailRequest:
      required:
        - password
        - new_email
      properties:
        password:
          type: string
          format: password
        new_email:
          type: string
          format: email

    WaterState:
      type: string
      enum:
        - dry
        - wet

  securitySchemes:
    jwt:
      type: apiKey
      name: Authorization
      in: header

paths:
  /auth:
    post:
      tags: [auth]
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        200:
          description: A new session for the member.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'

    put:
      tags: [auth]
      operationId: forgotPassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgotPasswordRequest'
      responses:
        200:
          description: If the email was sent.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForgotPasswordResponse'

  /auth/email:
    put:
      tags: [general]
      operationId: updateEmail
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEmailRequest'
      responses:
        200:
          description: A new session for the member.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
      security:
        - jwt: []

  /auth/password:
    post:
      tags: [auth]
      operationId: resetPassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
      responses:
        200:
          description: A new session for the member.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'

    put:
      tags: [general]
      operationId: updatePassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePasswordRequest'
      responses:
        200:
          description: A new session for the member.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
      security:
        - jwt: []

  /auth/signup:
    post:
      tags: [auth]
      operationId: signup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequest'
      responses:
        200:
          description: A new session for the member.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'

  /hubs/{hub_id}:
    parameters:
      - $ref: '#/components/parameters/HubId'
    put:
      tags: [general]
      operationId: setChirp
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetChirpRequest'
      responses:
        200:
          description: The hub.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hub'
      security:
        - jwt: []

  /hubs/install_code/{install_code}:
    parameters:
      - $ref: '#/components/parameters/InstallCode'
    get:
      tags: [auth]
      operationId: checkInstallCode
      responses:
        200:
          description: If the install code is valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckInstallCodeResponse'

  /hubs/serial_number/{serial_number}:
    parameters:
      - $ref: '#/components/parameters/SerialNumber'
    get:
      tags: [auth]
      operationId: checkSerialNumber
      responses:
        200:
          description: If the serial number is valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckSerialNumberResponse'

  /locations/{location_id}/devices:
    parameters:
      - $ref: '#/components/parameters/LocationId'
    get:
      tags: [general]
      operationId: getDevices
      responses:
        200:
          description: A list of the location's devices.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Device'
      security:
        - jwt: []

  /locations/{location_id}/hub:
    parameters:
      - $ref: '#/components/parameters/LocationId'
    get:
      tags: [general]
      operationId: getHub
      responses:
        200:
          description: The location's hub.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hub'
      security:
        - jwt: []

  /locations/{location_id}/modes:
    parameters:
      - $ref: '#/components/parameters/LocationId'
    get:
      tags: [general]
      operationId: getModes
      responses:
        200:
          description: A list of the location's modes.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Mode'
      security:
        - jwt: []

  /members/{member_id}/locations:
    parameters:
      - $ref: '#/components/parameters/MemberId'
    get:
      tags: [general]
      operationId: getLocations
      responses:
        200:
          description: A list of the member's locations.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Location'
      security:
        - jwt: []

  /modes/{mode_id}:
    parameters:
      - $ref: '#/components/parameters/ModeId'
    post:
      tags: [general]
      operationId: toggleRecipe
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ToggleRecipeRequest'
      responses:
        200:
          description: The updated recipe.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Mode'
      security:
        - jwt: []

tags:
  - name: general
  - name: auth
